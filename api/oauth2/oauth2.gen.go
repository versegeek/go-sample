// Package oauth2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oauth2

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// IntrospectResponse defines model for introspect_response.
type IntrospectResponse struct {
	Active   *bool     `json:"active,omitempty"`
	Aud      *[]string `json:"aud,omitempty"`
	ClientId *string   `json:"client_id,omitempty"`
	Exp      *string   `json:"exp,omitempty"`
	Iat      *string   `json:"iat,omitempty"`
	Scope    *string   `json:"scope,omitempty"`
	Sub      *string   `json:"sub,omitempty"`
}

// TokenRequestBody defines model for token_requestBody.
type TokenRequestBody struct {
	// ClientId Required if grant_type is urn:ietf:params:oauth:grant-type:device_code
	ClientId *string `json:"client_id,omitempty"`

	// Code Required if grant_type is authorization_code
	Code *string `json:"code,omitempty"`

	// CodeVerifier Required if grant_type is authorization_code and code_challenge was specified in the original /auth request
	CodeVerifier *string `json:"code_verifier,omitempty"`

	// DeviceCode Required if grant_type is urn:ietf:params:oauth:grant-type:device_code
	DeviceCode *string `json:"device_code,omitempty"`

	// GrantType Available values : authorization_code, client_credentials, refresh_token, urn:ietf:params:oauth:grant-type:device_code
	// Default value : authorization_code
	GrantType string `json:"grant_type"`

	// RedirectUri Required if grant_type is authorization_code
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// RefreshToken Required if grant_type is refresh_token. The value is a valid refresh token that was returned from this endpoint previously.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// TokenResponse defines model for token_response.
type TokenResponse struct {
	AccessToken  *string  `json:"access_token,omitempty"`
	ExpiresIn    *float32 `json:"expires_in,omitempty"`
	RefreshToken *string  `json:"refresh_token,omitempty"`
	Scope        *string  `json:"scope,omitempty"`
	TokenType    *string  `json:"token_type,omitempty"`
}

// TokenTypeHintRequestBody defines model for token_type_hint_requestBody.
type TokenTypeHintRequestBody struct {
	Token string `json:"token"`

	// TokenTypeHint access_token, refresh_token
	TokenTypeHint string `json:"token_type_hint"`
}

// UserinfoResponse defines model for userinfo_response.
type UserinfoResponse struct {
	Addresss *struct {
		Country       *string `json:"country,omitempty"`
		Locality      *string `json:"locality,omitempty"`
		PostalCode    *string `json:"postal_code,omitempty"`
		Region        *string `json:"region,omitempty"`
		StreetAddress *string `json:"street_address,omitempty"`
	} `json:"addresss,omitempty"`
	Aud            *[]string `json:"aud,omitempty"`
	AuthTime       *float32  `json:"auth_time,omitempty"`
	Cid            *string   `json:"cid,omitempty"`
	Email          *string   `json:"email,omitempty"`
	EmailVerified  *bool     `json:"email_verified,omitempty"`
	FamilyName     *string   `json:"family_name,omitempty"`
	GivenName      *string   `json:"given_name,omitempty"`
	Iat            *string   `json:"iat,omitempty"`
	IdpId          *string   `json:"idp_id,omitempty"`
	IdpTenant      *string   `json:"idp_tenant,omitempty"`
	IdpType        *string   `json:"idp_type,omitempty"`
	Iss            *string   `json:"iss,omitempty"`
	Kid            *string   `json:"kid,omitempty"`
	Locale         *string   `json:"locale,omitempty"`
	MiddleName     *string   `json:"middle_name,omitempty"`
	Name           *string   `json:"name,omitempty"`
	Nickname       *string   `json:"nickname,omitempty"`
	PhoneNumber    *string   `json:"phone_number,omitempty"`
	PreferUsername *string   `json:"prefer_username,omitempty"`
	Rat            *float32  `json:"rat,omitempty"`
	Sub            *string   `json:"sub,omitempty"`
}

// WellknowResponse defines model for wellknow_response.
type WellknowResponse struct {
	AuthorizationEndpoint            *string   `json:"authorization_endpoint,omitempty"`
	ClaimsSupported                  *[]string `json:"claims_supported,omitempty"`
	IdTokenSigningAlgValuesSupported *[]string `json:"id_token_signing_alg_values_supported,omitempty"`
	Issuer                           *string   `json:"issuer,omitempty"`

	// JwksUri https://baseurl.hponecloud.io/10/jwks.json
	JwksUri *string `json:"jwks_uri,omitempty"`

	// RegistrationEndpoint https://baseurl.hponecloud.io/oauth2/v1/register
	RegistrationEndpoint   *string   `json:"registration_endpoint,omitempty"`
	ResponseTypesSupported *[]string `json:"response_types_supported,omitempty"`
	SubjectTypesSupported  *[]string `json:"subject_types_supported,omitempty"`
	TokenEndpoint          *string   `json:"token_endpoint,omitempty"`

	// UserInfoEndpoint https://baseurl.hponecloud.io/oauth2/userinfo
	UserInfoEndpoint *string `json:"user_info_endpoint,omitempty"`
}

// GetOauth2V1AuthParams defines parameters for GetOauth2V1Auth.
type GetOauth2V1AuthParams struct {
	ClientId    string `form:"client_id" json:"client_id"`
	IdpId       string `form:"idp_id" json:"idp_id"`
	RedirectUri string `form:"redirect_uri" json:"redirect_uri"`
	State       string `form:"state" json:"state"`

	// ResponseType Available values : code
	ResponseType string `form:"response_type" json:"response_type"`

	// CodeChallenge The code challenge, if this is a pkce request
	CodeChallenge *string `form:"code_challenge,omitempty" json:"code_challenge,omitempty"`

	// CodeChallengeMethod The code challenge method must be S256, if this is a pkce request
	CodeChallengeMethod *string `form:"code_challenge_method,omitempty" json:"code_challenge_method,omitempty"`

	// IdpScopes Space-seperated. The idp dynamic scopes should be in your client's scope list, will be passes to idp.
	IdpScopes *string `form:"idp_scopes,omitempty" json:"idp_scopes,omitempty"`
}

// PostOauth2V1IntrospectParams defines parameters for PostOauth2V1Introspect.
type PostOauth2V1IntrospectParams struct {
	// Authorization The client_id and client_secret should be included in the Authorization header of the request as a Basic auth base64-encoded string.
	Authorization string `json:"Authorization"`
}

// PostOauth2V1RevokeParams defines parameters for PostOauth2V1Revoke.
type PostOauth2V1RevokeParams struct {
	// Authorization The client_id and client_secret should be included in the Authorization header of the request as a Basic auth base64-encoded string.
	Authorization string `json:"Authorization"`
}

// PostOauth2V1TokenParams defines parameters for PostOauth2V1Token.
type PostOauth2V1TokenParams struct {
	// Authorization The client_id and client_secret should be included in the Authorization header of the request as a Basic auth base64-encoded string.
	Authorization string `json:"Authorization"`
}

// PostOauth2V1UserinfoParams defines parameters for PostOauth2V1Userinfo.
type PostOauth2V1UserinfoParams struct {
	// Authorization The Access Token obtained from an OpenID Connect Authentication Request MUST be sent as a Bearer Token, per Section 2 of OAuth 2.0 Bearer Token Usage [RFC6750]
	Authorization string `json:"Authorization"`
}

// PostOauth2V1ExtensionsBlacklistFormdataRequestBody defines body for PostOauth2V1ExtensionsBlacklist for application/x-www-form-urlencoded ContentType.
type PostOauth2V1ExtensionsBlacklistFormdataRequestBody = TokenTypeHintRequestBody

// PostOauth2V1IntrospectFormdataRequestBody defines body for PostOauth2V1Introspect for application/x-www-form-urlencoded ContentType.
type PostOauth2V1IntrospectFormdataRequestBody = TokenTypeHintRequestBody

// PostOauth2V1RevokeFormdataRequestBody defines body for PostOauth2V1Revoke for application/x-www-form-urlencoded ContentType.
type PostOauth2V1RevokeFormdataRequestBody = TokenTypeHintRequestBody

// PostOauth2V1TokenFormdataRequestBody defines body for PostOauth2V1Token for application/x-www-form-urlencoded ContentType.
type PostOauth2V1TokenFormdataRequestBody = TokenRequestBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The OAuth 2.0 Auth endpoint
	// (GET /oauth2/v1/auth)
	GetOauth2V1Auth(c *gin.Context, params GetOauth2V1AuthParams)
	// Check if token is invalidated/revoked
	// (POST /oauth2/v1/extensions/blacklist)
	PostOauth2V1ExtensionsBlacklist(c *gin.Context)
	// The OAuth 2.0 Introspect endpoint
	// (POST /oauth2/v1/introspect)
	PostOauth2V1Introspect(c *gin.Context, params PostOauth2V1IntrospectParams)
	// The OAuth 2.0 Revoke endpoint
	// (POST /oauth2/v1/revoke)
	PostOauth2V1Revoke(c *gin.Context, params PostOauth2V1RevokeParams)
	// The OAuth 2.0 Token endpoint
	// (POST /oauth2/v1/token)
	PostOauth2V1Token(c *gin.Context, params PostOauth2V1TokenParams)
	// The OIDC userinfo endpoint
	// (POST /oauth2/v1/userinfo)
	PostOauth2V1Userinfo(c *gin.Context, params PostOauth2V1UserinfoParams)
	// The OIDC well-known endpoint
	// (GET /oauth2/v1/{tenant}/.well-known/openid-configuration)
	GetOauth2V1TenantWellKnownOpenidConfiguration(c *gin.Context, tenant string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetOauth2V1Auth operation middleware
func (siw *ServerInterfaceWrapper) GetOauth2V1Auth(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOauth2V1AuthParams

	// ------------- Required query parameter "client_id" -------------

	if paramValue := c.Query("client_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument client_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "client_id", c.Request.URL.Query(), &params.ClientId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "idp_id" -------------

	if paramValue := c.Query("idp_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument idp_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "idp_id", c.Request.URL.Query(), &params.IdpId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "redirect_uri" -------------

	if paramValue := c.Query("redirect_uri"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirect_uri is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", c.Request.URL.Query(), &params.RedirectUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirect_uri: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "response_type" -------------

	if paramValue := c.Query("response_type"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument response_type is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "response_type", c.Request.URL.Query(), &params.ResponseType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter response_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "code_challenge" -------------

	err = runtime.BindQueryParameter("form", true, false, "code_challenge", c.Request.URL.Query(), &params.CodeChallenge)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code_challenge: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "code_challenge_method" -------------

	err = runtime.BindQueryParameter("form", true, false, "code_challenge_method", c.Request.URL.Query(), &params.CodeChallengeMethod)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code_challenge_method: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "idp_scopes" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp_scopes", c.Request.URL.Query(), &params.IdpScopes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp_scopes: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOauth2V1Auth(c, params)
}

// PostOauth2V1ExtensionsBlacklist operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1ExtensionsBlacklist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1ExtensionsBlacklist(c)
}

// PostOauth2V1Introspect operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1Introspect(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOauth2V1IntrospectParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1Introspect(c, params)
}

// PostOauth2V1Revoke operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1Revoke(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOauth2V1RevokeParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1Revoke(c, params)
}

// PostOauth2V1Token operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1Token(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOauth2V1TokenParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1Token(c, params)
}

// PostOauth2V1Userinfo operation middleware
func (siw *ServerInterfaceWrapper) PostOauth2V1Userinfo(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostOauth2V1UserinfoParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOauth2V1Userinfo(c, params)
}

// GetOauth2V1TenantWellKnownOpenidConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetOauth2V1TenantWellKnownOpenidConfiguration(c *gin.Context) {

	var err error

	// ------------- Path parameter "tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "tenant", c.Param("tenant"), &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tenant: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOauth2V1TenantWellKnownOpenidConfiguration(c, tenant)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/oauth2/v1/auth", wrapper.GetOauth2V1Auth)
	router.POST(options.BaseURL+"/oauth2/v1/extensions/blacklist", wrapper.PostOauth2V1ExtensionsBlacklist)
	router.POST(options.BaseURL+"/oauth2/v1/introspect", wrapper.PostOauth2V1Introspect)
	router.POST(options.BaseURL+"/oauth2/v1/revoke", wrapper.PostOauth2V1Revoke)
	router.POST(options.BaseURL+"/oauth2/v1/token", wrapper.PostOauth2V1Token)
	router.POST(options.BaseURL+"/oauth2/v1/userinfo", wrapper.PostOauth2V1Userinfo)
	router.GET(options.BaseURL+"/oauth2/v1/:tenant/.well-known/openid-configuration", wrapper.GetOauth2V1TenantWellKnownOpenidConfiguration)
}
